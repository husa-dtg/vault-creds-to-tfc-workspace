{"version":3,"file":"index.js","mappings":";;;;;;AAAA;;;;;;;;AAAA;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7BA;AACA;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["../webpack://tfc.actions-workspace-vars/../../../../../../usr/local/lib/node_modules/@vercel/ncc/dist/ncc/@@notfound.js","../webpack://tfc.actions-workspace-vars/webpack/bootstrap","../webpack://tfc.actions-workspace-vars/webpack/runtime/compat","../webpack://tfc.actions-workspace-vars/./index.js"],"sourcesContent":[null,"// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","const core = require(\"@actions/core\");\nconst axios = require('axios');\n\n// main() - Primary entrypoint for this action.\nasync function main() {\n    try {\n        // Get input from the workflow.\n        const organization = core.getInput('organization');\n        const workspace = core.getInput('workspace');\n        const tfc_token = core.getInput('tfc_token');\n        const tfc_host = core.getInput('tfc_host');\n        const variable_key = core.getInput('variable_key');\n        const variable_value = core.getInput('variable_value');\n\n        // TODO - Validate the input.\n\n        // Define our API HTTP client options.\n        const apiOptions = {\n            headers: {\n                'Content-Type': 'application/vnd.api+json',\n                'Authorization': 'Bearer' + tfc_token\n            }\n        };\n        core.debug(\"api_options: \" + apiOptions);\n\n        // Fetch Workspace ID\n        const tfcWorkspaceEndpoint = \"https://\" + tfc_host + \"/api/v2/organizations/\" + organization + \"/workspaces/\" + workspace;\n        var response = await axios.get(tfcWorkspaceEndpoint, apiOptions);\n        const workspaceId = response.data.data.id;\n        core.debug(\"workspaceId: \" + workspaceId);\n\n        // Fetch the variable ID\n        const tfcListVariablesEndpoint = \"https://\" + tfc_host + \"/api/v2/vars/?filter[organization][name]=\" + organization + \"&filter[workspace][name]=\" + workspace;\n        response = await axios.get(tfcListVariablesEndpoint, apiOptions);\n        const workspaceVariables = response.data.data;\n        let variableId = null;\n        for (let variable of workspaceVariables) {\n            if (variable.attributes.key === variable_key) {\n                variableId = variable.id;\n            }\n        }\n        if (variableId == null) {\n            core.setFailed('variable could not be found in workspace');\n        }\n\n        const tfcVariableUpdateEndpoint = \"https://\" + tfc_host + \"/api/v2/vars/\" + variableId;\n        let updateRequest = {\n            data: {\n                id: variableId,\n                attributes: {\n                    \"value\": variable_value,\n                    \"hcl\": 'false',\n                },\n                type: \"vars\",\n            }\n        };\n        core.debug(\"updateRequest:\" + JSON.stringify(updateRequest));\n\n        // Invoking Terraform Variable Patch API\n        axios.patch(tfcVariableUpdateEndpoint, updateRequest, apiOptions)\n            .then((response) => {\n                core.info(\"update variable success:\" + JSON.stringify(response.data));\n                // TODO - Do we need to do this?\n                // core.setOutput(\"variableId\", response.data.data.id);\n            }, (error) => {\n                core.setFailed(\"update variable error:\" + JSON.stringify(error.response.data));\n                core.setFailed(error.message);\n            });\n    } catch (error) {\n        //  Report the error back to the runner.\n        core.setFailed(error.message);\n    }\n}\n\n// Run the action.\nmain();"],"names":[],"sourceRoot":""}